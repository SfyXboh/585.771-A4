},
value.var = 'Variant_Classification',
fill = '',
drop = FALSE
)
# convert first column into row names
rownames(oncomat) = oncomat$Hugo_Symbol
oncomat <- oncomat[,-1]
oncomat.ordered <- oncomat[order(-hugo$Freq),]
# convert the oncoplot matrix into a binary matrix
## any mutation = 1; no mutation = 0
mat <- oncomat.ordered
mat[mat!=""]=1
mat[mat==""]=0
mat <- apply(mat, 2 ,as.numeric)
mat <- as.matrix(mat)
rownames(mat)  <-  row.names(oncomat.ordered)
# perform clustering on the first 11(?) genes in the oncoplot
reduce.mat <- mat[1:10,]
res <- pheatmap(reduce.mat,
cluster_rows = F,
show_colnames=FALSE,
clustering_method = "ward.D") # column names (the patient) hidden b/c there are too many of them
# we want to group the patients based on their mutation type
cluster <- as.data.frame(cutree(res$tree_col, k = 2))
colnames(cluster) <- (c("condition"))
table(cluster)
# 2 conditions for DEseq
#library("TCGAbiolinks")
library("survival")
library("survminer")
clinical <- clinical[clinical.patients %in% common.patients,]
#prepare data
#reorder cluster to match the order of patients in clinical data
condition <- cluster[clinical$PATIENT_ID,]
deceased <- clinical$OS_STATUS == "1:DECEASED"
overall_survival <- clinical$OS_MONTHS
sur <- data.frame(condition, deceased, overall_survival)
fit = survfit(Surv(overall_survival, deceased) ~ condition, data=sur)
ggsurvplot(fit, data=sur, pval=T)
library(DESeq2)
library(pheatmap)
library(ggplot2)
countData <- as.matrix(RNAseq)
rownames(countData) <- countData[,1] # make gene names row names
countData <- countData[,-1]
# remove duplicates
countData <- countData[, !duplicated(colnames(countData))]
# remove patients not in the cluster
countData <- countData[, rownames(cluster)]
coln <- colnames(countData)
rown <- rownames(countData)
countData <- matrix(as.numeric(countData), ncol = ncol(countData))
colnames(countData) <- coln
rownames(countData) <- rown
countData <- countData[rowSums(countData) > 1,]
# head(countData)
sampleDists = dist(t(countData),upper = TRUE)
sampleDists
dds = DESeqDataSetFromMatrix(countData=countData,
colData=cluster,
design=~condition)
dds = DESeq(dds)
res <- results(dds)
res <- res[order(res$pvalue),]
resSig <- subset(res, padj < 0.06)
#strongest up regulation
head(resSig[ order( resSig$log2FoldChange, decreasing=TRUE), ])
#strongest down regulation
head(resSig[ order( resSig$log2FoldChange),])
plotMA(res, ylim=c(-2,2))
dds$condition <- as.factor(dds$condition)
plotCounts(dds, gene=which.min(res$padj), intgroup="condition")
# this gives log2(n + 1)
ntd <- normTransform(dds)
# Variance stabilizing transformation
vsd <- vst(dds, blind = FALSE)
sampleDists = dist(t(assay(vsd)),upper = TRUE)
sampleDistMatrix = as.matrix( sampleDists )
#annot_col = data.frame(colData$cluster)
#row.names(annot_col) <- rownames(colData)
annot_col <- cluster
rownames(sampleDistMatrix) = colnames(countData)
colnames(sampleDistMatrix) = colnames(countData)
pheatmap(sampleDistMatrix[1:20],
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
cluster_rows=FALSE, show_rownames=TRUE,
cluster_cols=TRUE,
annotation_col=annot_col)
pheatmap(sampleDistMatrix[1:20,],
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
cluster_rows=FALSE, show_rownames=TRUE,
cluster_cols=TRUE,
annotation_col=annot_col)
res <- res[order(res$pvalue),]
res.sig <- subset(res, padj < 0.1)
#strongest down regulation
head(res.sig[order(res.sig$log2FoldChange),])
#strongest up regulation
head(res.sig[order(res.sig$log2FoldChange, decreasing = T),])
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
cluster_rows=FALSE, show_rownames=TRUE,
cluster_cols=TRUE,
annotation_col=annot_col)
res <- res[order(res$pvalue),]
res.sig <- subset(res, padj < 0.1)
#strongest down regulation
head(res.sig[order(res.sig$log2FoldChange),])
#strongest up regulation
head(res.sig[order(res.sig$log2FoldChange, decreasing = T),])
pca_res <- prcomp(t(countData), scale. = TRUE)
score <- pca_res$x
score = as.data.frame(score)
score$color <- as.factor(cluster$condition)
ggplot(score, aes(x=PC1, y=PC2,  color=color)) +
geom_point(size = 2)
library("AnnotationDbi")
BiocManager::install("AnnotationDbi")
library("AnnotationDbi")
library("org.Hs.eg.db")
BiocManager::install("org.Hs.eg.db")
library("AnnotationDbi")
library("org.Hs.eg.db")
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
cluster_rows=FALSE, show_rownames=TRUE,
cluster_cols=TRUE,
annotation_col=annot_col)
res <- res[order(res$pvalue),]
res.sig <- subset(res, padj < 0.1)
#strongest down regulation
head(res.sig[order(res.sig$log2FoldChange),])
#strongest up regulation
head(res.sig[order(res.sig$log2FoldChange, decreasing = T),])
pca_res <- prcomp(t(countData), scale. = TRUE)
score <- pca_res$x
score = as.data.frame(score)
score$color <- as.factor(cluster$condition)
ggplot(score, aes(x=PC1, y=PC2,  color=color)) +
geom_point(size = 2)
library("AnnotationDbi")
library("org.Hs.eg.db")
row.names(res) <- substr(row.names(res), 1, 15)
res$symbol = mapIds(org.Hs.eg.db,
keys=row.names(res),
column="SYMBOL",
keytype="ENSEMBL",
multiVals="first")
res$entrez = mapIds(org.Hs.eg.db,
keys=row.names(res),
column="ENTREZID",
keytype="ENSEMBL",
multiVals="first")
res$name =   mapIds(org.Hs.eg.db,
keys=row.names(res),
column="GENENAME",
keytype="ENSEMBL",
multiVals="first")
library(pathview)
BiocManager::install("pathview")
BiocManager::install(gage)
BiocManager::install("gage")
BiocManager::install(gageData)
BiocManager::install("gageData")
library(pathview)
library(gage)
library(gageData)
data(kegg.sets.hs)
data(sigmet.idx.hs)
# Focus on signaling and metabolic pathways only
kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]
# Examine the first 3 pathways
head(kegg.sets.hs, 3)
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
attributes(keggres)
# Look at the first few down (less) pathways
#downregulated
head(keggres$less)
# Look at the first few down (less) pathways
#upregulated
head(keggres$greater)
##upregulated and downregulated pathways
keggrespathwaysup <- rownames(keggres$greater)[1:10]
keggrespathwaysdown <- rownames(keggres$less)[1:10]
# Extract the 8 character long IDs part of each string
keggresids1 = substr(keggrespathwaysup, start=1, stop=8)
keggresids2 = substr(keggrespathwaysdown, start=1, stop=8)
pathview(gene.data=foldchanges, pathway.id="hsa04610")
install.packages("GenomicRanges")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.20")
setwd("C:/Users/rexsw/Desktop/JHU/EN.585.771.81.FA25/Assignment 4/585.771-A4")
annual <- read.csv(county_annual.csv)
annual <- read.csv("county_annual.csv")
View(annual)
annual <- read.csv("county_annual.csv"); annual <- as_tibble(annual);
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("tidyr")
install.packages("tibble")
annual <- read.csv("county_annual.csv"); annual <- as_tibble(annual);
library(dplyr)
library(tidyr)
library(tibble)
annual <- read.csv("county_annual.csv"); annual <- as_tibble(annual);
population <- read.csv("county_pop_arcos.csv"); population <- as_tibble(population);
land <- read.csv("land_area.csv"); land <- as_tibble(land)
View(annual)
# import data
annualDosage <- read.csv("county_annual.csv"); annualDosage <- as_tibble(annualDosage);
county_pop <- read.csv("county_pop_arcos.csv"); county_pop <- as_tibble(county_pop);
land <- read.csv("land_area.csv"); land <- as_tibble(land)
# select land area from 2010
land_area <-
land %>%
select(Areaname, STCOU, LND110210D)
# fill in fips code for Montgomery, AR
annualDosage %<>%
mutate(countyfips = case_when(BUYER_STATE == "AR" &
BUYER_COUNTY == "MONTGOMERY" ~ as.character("05097"),
TRUE ~ countyfips))
# remove American terrirories with no fips code
annualDosage %<>%
filter(!is.na(countyfips))
install.packages("magrittr")
install.packages("magrittr")
library(magrittr)
# import data
annualDosage <- read.csv("county_annual.csv"); annualDosage <- as_tibble(annualDosage);
county_pop <- read.csv("county_pop_arcos.csv"); county_pop <- as_tibble(county_pop);
land <- read.csv("land_area.csv"); land <- as_tibble(land)
# select land area from 2010
land_area <-
land %>%
select(Areaname, STCOU, LND110210D)
# fill in fips code for Montgomery, AR
annualDosage %<>%
mutate(countyfips = case_when(BUYER_STATE == "AR" &
BUYER_COUNTY == "MONTGOMERY" ~ as.character("05097"),
TRUE ~ countyfips))
rlang::last_trace()
# fill in fips code for Montgomery, AR
annualDosage %<>%
mutate(countyfips = case_when(BUYER_STATE == "AR" &
BUYER_COUNTY == "MONTGOMERY" ~ 05097),
TRUE ~ countyfips))
# fill in fips code for Montgomery, AR
annualDosage %<>%
mutate(countyfips = case_when(BUYER_STATE == "AR" &
BUYER_COUNTY == "MONTGOMERY" ~ 05097,
TRUE ~ countyfips))
# remove American terrirories with no fips code
annualDosage %<>%
filter(!is.na(countyfips))
# join population with land area
land_area %<>%
rename(countyfips = STCOU) # match column name
county_info <-
left_join(x = county_pop, y = land_area, by = "countyfips")
# join county info with drug data
annualDosage %<>%
mutate(countyfips = as.factor(countyfips),
year = as.factor(year))
Annual <-
left_join(annualDosage, county_info)
# join county info with drug data
annualDosage %<>%
mutate(countyfips = as.factor(countyfips),
year = as.factor(year))
county_info %<>%
mutate(countyfips = as.factor(countyfips),
year = as.factor(year))
Annual <-
left_join(annualDosage, county_info)
# remove NA
Annual %<>%
filter(!is.na(STATE))
# add column pills in millions
Annual %<>%
mutate(Pills_in_millions = DOSAGE_UNIT/1000000)
# plot mean pills per county per year
raw_average <-
Annual %>%
group_by(year) %>%
ggplot(aes(x = year, y = Pills_in_millions)) +
stat_summary(fun = mean, geom = "line") +
labs(title = "Average Number of Opioid Pills Shipped to a US County",
y = "Number of pills in millions") +
theme_minimal()
library(ggplot2)
raw_average <-
Annual %>%
group_by(year) %>%
ggplot(aes(x = year, y = Pills_in_millions)) +
stat_summary(fun = mean, geom = "line") +
labs(title = "Average Number of Opioid Pills Shipped to a US County",
y = "Number of pills in millions") +
theme_minimal()
raw_average
library(dplyr)
library(tidyr)
library(tibble)
library(magrittr)
library(ggplot2)
# import data
annualDosage <- read.csv("county_annual.csv"); annualDosage <- as_tibble(annualDosage);
county_pop <- read.csv("county_pop_arcos.csv"); county_pop <- as_tibble(county_pop);
land <- read.csv("land_area.csv"); land <- as_tibble(land)
# select land area from 2010
land_area <-
land %>%
select(Areaname, STCOU, LND110210D)
# fill in fips code for Montgomery, AR
annualDosage %<>%
mutate(countyfips = case_when(BUYER_STATE == "AR" &
BUYER_COUNTY == "MONTGOMERY" ~ 05097,
TRUE ~ countyfips))
# remove American terrirories with no fips code
annualDosage %<>%
filter(!is.na(countyfips))
# join population with land area
land_area %<>%
rename(countyfips = STCOU) # match column name
county_info <-
left_join(x = county_pop, y = land_area, by = "countyfips")
# join county info with drug data
annualDosage %<>%
mutate(countyfips = as.factor(countyfips),
year = as.factor(year))
county_info %<>%
mutate(countyfips = as.factor(countyfips),
year = as.factor(year))
Annual <-
left_join(annualDosage, county_info)
# remove NA
Annual %<>%
filter(!is.na(STATE))
# add column pills in millions
Annual %<>%
mutate(Pills_in_millions = DOSAGE_UNIT/1000000)
# plot mean pills per county per year
raw_average <-
Annual %>%
group_by(year) %>%
ggplot(aes(x = year, y = Pills_in_millions)) +
stat_summary(fun = mean, geom = "line") +
labs(title = "Average Number of Opioid Pills Shipped to a US County",
y = "Number of pills in millions") +
theme_minimal()
raw_average
library(dplyr)
library(tidyr)
library(tibble)
library(magrittr)
library(ggplot2)
# import data
annualDosage <- read.csv("county_annual.csv"); annualDosage <- as_tibble(annualDosage);
county_pop <- read.csv("county_pop_arcos.csv"); county_pop <- as_tibble(county_pop);
land <- read.csv("land_area.csv"); land <- as_tibble(land)
# select land area from 2010
land_area <-
land %>%
select(Areaname, STCOU, LND110210D)
# fill in fips code for Montgomery, AR
annualDosage %<>%
mutate(countyfips = case_when(BUYER_STATE == "AR" &
BUYER_COUNTY == "MONTGOMERY" ~ 05097,
TRUE ~ countyfips))
# remove American terrirories with no fips code
annualDosage %<>%
filter(!is.na(countyfips))
# join population with land area
land_area %<>%
rename(countyfips = STCOU) # match column name
county_info <-
left_join(x = county_pop, y = land_area, by = "countyfips")
# join county info with drug data
annualDosage %<>%
mutate(countyfips = as.factor(countyfips),
year = as.factor(year))
county_info %<>%
mutate(countyfips = as.factor(countyfips),
year = as.factor(year))
Annual <-
left_join(annualDosage, county_info)
# remove NA
Annual %<>%
filter(!is.na(STATE))
# add column pills in millions
Annual %<>%
mutate(Pills_in_millions = DOSAGE_UNIT/1000000)
# plot mean pills per county per year
raw_average <-
Annual %>%
group_by(year) %>%
ggplot(aes(x = year, y = Pills_in_millions)) +
stat_summary(fun = mean, geom = "line") +
labs(title = "Average Number of Opioid Pills Shipped to a US County",
y = "Number of pills in millions") +
theme_minimal()
raw_average
View(Annual)
View(annualDosage)
View(county_info)
View(annualDosage)
View(county_info)
library(dplyr)
library(tidyr)
library(tibble)
library(magrittr)
library(ggplot2)
# import data
annualDosage <- read.csv("county_annual.csv"); annualDosage <- as_tibble(annualDosage);
county_pop <- read.csv("county_pop_arcos.csv"); county_pop <- as_tibble(county_pop);
land <- read.csv("land_area.csv"); land <- as_tibble(land)
# select land area from 2010
land_area <-
land %>%
select(Areaname, STCOU, LND110210D)
# fill in fips code for Montgomery, AR
annualDosage %<>%
mutate(countyfips = case_when(BUYER_STATE == "AR" &
BUYER_COUNTY == "MONTGOMERY" ~ 05097,
TRUE ~ countyfips))
# remove American terrirories with no fips code
annualDosage %<>%
filter(!is.na(countyfips))
# join population with land area
land_area %<>%
rename(countyfips = STCOU) # match column name
county_info <-
left_join(x = county_pop, y = land_area, by = "countyfips")
# join county info with drug data
annualDosage %<>%
mutate(countyfips = as.factor(countyfips),
year = as.factor(year))
county_info %<>%
mutate(countyfips = as.factor(countyfips),
year = as.factor(year))
Annual <-
left_join(annualDosage, county_info, by = c("BUYER_COUNTY",
"BUYER_STATE",
"year",
"countyfips"))
# remove NA
Annual %<>%
filter(!is.na(STATE))
# add column pills in millions
Annual %<>%
mutate(Pills_in_millions = DOSAGE_UNIT/1000000)
# plot mean pills per county per year
raw_average <-
Annual %>%
group_by(year) %>%
ggplot(aes(x = year, y = Pills_in_millions)) +
stat_summary(fun = mean, geom = "line") +
labs(title = "Average Number of Opioid Pills Shipped to a US County",
y = "Number of pills in millions") +
theme_minimal()
raw_average
View(Annual)
View(Annual)
raw_average <-
Annual %>%
ggplot(aes(x = year, y = Pills_in_millions, group = 1)) +
stat_summary(fun = mean, geom = "line") +
labs(title = "Average Number of Opioid Pills Shipped to a US County",
y = "Number of pills in millions") +
theme_minimal()
raw_average <-
Annual %>%
ggplot(aes(x = year, y = Pills_in_millions, group = 1)) +
stat_summary(fun = mean, geom = "line") +
labs(title = "Average Number of Opioid Pills Shipped to a US County",
y = "Number of pills in millions") +
theme_minimal()
raw_average
raw_average <-
Annual %>%
ggplot(aes(x = year, y = Pills_in_millions, group = 1)) +
stat_summary(fun = mean, geom = "dot") +
labs(title = "Average Number of Opioid Pills Shipped to a US County",
y = "Number of pills in millions") +
theme_minimal()
raw_average
raw_average <-
Annual %>%
ggplot(aes(x = year, y = Pills_in_millions, group = 1)) +
stat_summary(fun = mean, geom = "point", size = 2) +
labs(title = "Average Number of Opioid Pills Shipped to a US County",
y = "Number of pills in millions") +
theme_minimal()
raw_average
library(dplyr)
library(tidyr)
library(tibble)
library(magrittr)
library(ggplot2)
.libPaths()
